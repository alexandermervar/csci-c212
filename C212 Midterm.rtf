{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 public boolean isPalindrome (String str) \{\
	String backwards = \'93\'94;\
	for (int i = str.length() -1; i > -1; I\'97) \{\
		backwards += str[i];\
	\}\
	return (str == backwards);\
\}\
\
----------\
\
private int[] maxMin(int[] input) \{\
	int[] maxArray = Arrays.sort(input, input.length()-1, 0);\
	int[] minArray = Arrays.sort(input);\
	int[] returnArray = new int[2];\
	returnArray[0] = maxArray[0];\
	retrunArray[1] = minArray[0];\
\
	return returnArray;\
\}\
\
----------\
\
public class Rectangle \{\
\
	public float area (float a, float b) \{\
		return a * b;\
	\}\
\
	public float area (float a) \{\
		return a * a;\
	\}\
\
\}\
\
----------\
\
public ArrayList<String> removeDuplicates (ArrayList<String> inputArray) \{\
	\
	ArrayList<String> returnArray = new ArrayList<String>();\
\
	for (int i = 0; i < inputArray.size(); i++) \{\
		if (returnArray.contains(inputArray.get(i)) == false) \{\
			returnArray.add(inputArray.get(i));\
		\}\
	\}\
\
	return returnArray;\
\}\
\
----------\
\
public interface Veggie \{\
\
	void howToCook();\
\
\}\
\
public class Carrot implements Veggie \{\
\
\
	private int carroutCount;\
\
	public Carrot() \{\
		carrotCount = 1\
	\}\
\
	public void setCarrotCount(int count) \{\
		carrotCount = count;\
	\}\
	public int getCarrotCount() \{\
		return carrotCount;\
	\}\
\
	public void howToCook() \{\
		System.out.println("Slow cook!");\
	\}\
\
\}\
\
public class VeggieTest \{\
	public static void main(String[] args) \{\
		Carrot carrotOne = new Carrot();\
		carrotOne.howToCook();\
		// Should print "Slow cook!"\
	\}\
\}}